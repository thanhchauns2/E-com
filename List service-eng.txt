1. Gateway Service: 1000
Functionality:
    1.1. Registration
        * JSON input: {Username, Password, Email, Address, City, Country, First Name, Last Name}
        * Called functions: 4.1, 4.3, 4.4, 4.5
    1.2. Login
        (Not currently needed)
    1.3. Inventory Management:
        1.3.1. Initialize + update inventory
            * JSON input (optional): {Address, Book Quantity, Clothes Quantity, Electronic Quantity, Status}
            * Called functions: 8.1, 8.2
        1.3.2. Add product to inventory
            * JSON input: {Product ID, Quantity}
            * Called function: 8.3
        1.3.3. Remove product from inventory
            * JSON input: {Product ID, Quantity}
            * Called function: 8.5
        1.3.4 Check inventory
            * JSON input: {}
            * Called function: 8.4
        1.3.5 Register a new product
            * JSON input: {Category Name, Author Name, Author Email, Author Address, Book Title, Published Date, Price, Description}
            * Called functions: 2.1.1, 2.1.2, 2.1.3
    1.4. Cart Management:
        1.4.1. Add product to cart
            * JSON input: {User ID, Product ID, Quantity}
            * Called function: 5.2
        1.4.2. Remove product from cart
            * JSON input: {User ID, Product ID, Quantity}
            * Called function: 5.3
        1.4.3. Check cart
            * JSON input: {User ID}
            * Called function: 5.4
        1.4.4. Purchase products
            * JSON input: {User ID}
            * Called functions: 3.1, 5.5
    1.5. Order Management:
        1.5.1 Track order
            * JSON input: {Order ID}
            * Called function: 3.3
        1.5.2 Update order
            * JSON input: {Order ID, Status}
            * Called functions: 3.2, 3.3
2. Product Service:
Divided into smaller functionalities:
    - Book: 2100 - done
        2.1.1. Create author
            * JSON input: {Author Name, Email, Address}
        2.1.2. Create category
            * JSON input: {Category Name}
        2.1.3. Create book
            * JSON input: {Title, Author ID, Category ID, Published Date, Price, Description}
        2.1.4. Delete book
            * JSON input: {Book ID}
        2.1.5. Find author
            * JSON input: {Author Name}
        2.1.6. Find category
            * JSON input: {Category Name}
        2.1.7. Find book
            * JSON input: {search_term}, where search_term can be: book id, book title, category name, author name
    - Shoes: 2200 - Not necessary
    - Clothes: 2300 - Not necessary
3. Order Service: 3000 - done
Functionality:
    3.1. Create an invoice:
        * JSON input: {User ID}
        * Functions called: 5.4, 5.5
    3.2. Update invoice status:
        * JSON input: {Order ID, Status}
    3.3. Check invoice:
        * JSON input: {Order ID}
4. Customer Service: 4000 - done
Functionality:
    4.1. Create a new account:
        * JSON input: {Username, Password, Email}
    4.2. Delete account:
        * JSON input: {Account ID}
    4.3. Create fullname:
        * JSON input: {First Name, Last Name}
    4.4. Create address:
        * JSON input: {Address, City, Country}
    4.5. Create customer:
        * JSON input: {Account ID, Fullname ID, Address ID}
        * Functions called: 5.1
    Technology used: Django ORM
5. Cart Service: 5000 - done
Functionality:
    5.1. Create a cart:
        * JSON input: {User ID}
    5.2. Add item to cart:
        * JSON input: {User ID, Product ID, Quantity}
    5.3. Remove item from cart:
        * JSON input: {User ID, Product ID, Quantity}
    5.4. View cart information:
        * JSON input: {User ID}
        * Functions called: 2.1.7
    5.5. Clear all items in cart:
        * JSON input: {User ID}
6. Payment Service: 6000
Functionality: Process payment for orders, including payment information, transaction confirmation, etc.
Technology used: Django ORM
7. Notification Service: 7000
Functionality: Send notifications to customers about system activities, including order updates, payments, etc.
Technology used: Django ORM
8. Inventory Service: 8000
Functionality:
    8.1. Initialize inventory:
        * JSON input: {}
    8.2. Update inventory information (address, size, status):
        * JSON input (optional): {Address, Book Quantity, Clothes Quantity, Electronic Quantity, Status}
    8.3. Add a product to inventory:
        * JSON input: {Product ID, Quantity}
    8.4. Return inventory information:
        * JSON input: {}
    8.5. Remove a product from inventory:
        * JSON input: {Product ID, Quantity}
    8.6. Check remaining capacity of inventory:
        * JSON input: {Product ID, Quantity}